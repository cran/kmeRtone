// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// countKmers
std::unordered_map<std::string,int> countKmers(std::vector<std::string> sequences, int k);
RcppExport SEXP _kmeRtone_countKmers(SEXP sequencesSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type sequences(sequencesSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(countKmers(sequences, k));
    return rcpp_result_gen;
END_RCPP
}
// countMidPatternContext2
std::unordered_map<int,int> countMidPatternContext2(std::string sequence, std::string mid_pattern, int window, std::vector<std::string> context_patterns);
RcppExport SEXP _kmeRtone_countMidPatternContext2(SEXP sequenceSEXP, SEXP mid_patternSEXP, SEXP windowSEXP, SEXP context_patternsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type sequence(sequenceSEXP);
    Rcpp::traits::input_parameter< std::string >::type mid_pattern(mid_patternSEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type context_patterns(context_patternsSEXP);
    rcpp_result_gen = Rcpp::wrap(countMidPatternContext2(sequence, mid_pattern, window, context_patterns));
    return rcpp_result_gen;
END_RCPP
}
// countMidPatternKmers
std::unordered_map<std::string,int> countMidPatternKmers(std::vector<std::string> sequences, int k, std::string mid_pattern);
RcppExport SEXP _kmeRtone_countMidPatternKmers(SEXP sequencesSEXP, SEXP kSEXP, SEXP mid_patternSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type sequences(sequencesSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< std::string >::type mid_pattern(mid_patternSEXP);
    rcpp_result_gen = Rcpp::wrap(countMidPatternKmers(sequences, k, mid_pattern));
    return rcpp_result_gen;
END_RCPP
}
// countPointContext2
std::unordered_map<int,int> countPointContext2(std::string sequence, std::vector<int> points, int len, int window, std::vector<std::string> context_patterns);
RcppExport SEXP _kmeRtone_countPointContext2(SEXP sequenceSEXP, SEXP pointsSEXP, SEXP lenSEXP, SEXP windowSEXP, SEXP context_patternsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type sequence(sequenceSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< int >::type len(lenSEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type context_patterns(context_patternsSEXP);
    rcpp_result_gen = Rcpp::wrap(countPointContext2(sequence, points, len, window, context_patterns));
    return rcpp_result_gen;
END_RCPP
}
// countRangedKmers
std::unordered_map<std::string,int> countRangedKmers(std::string sequence, std::vector<int> starts, std::vector<int> ends, int k);
RcppExport SEXP _kmeRtone_countRangedKmers(SEXP sequenceSEXP, SEXP startsSEXP, SEXP endsSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type sequence(sequenceSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type starts(startsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type ends(endsSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(countRangedKmers(sequence, starts, ends, k));
    return rcpp_result_gen;
END_RCPP
}
// countSlidingWindow
std::vector<int> countSlidingWindow(std::string sequence, int window, std::string pattern);
RcppExport SEXP _kmeRtone_countSlidingWindow(SEXP sequenceSEXP, SEXP windowSEXP, SEXP patternSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type sequence(sequenceSEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< std::string >::type pattern(patternSEXP);
    rcpp_result_gen = Rcpp::wrap(countSlidingWindow(sequence, window, pattern));
    return rcpp_result_gen;
END_RCPP
}
// countSlidingWindow2
std::unordered_map<int,int> countSlidingWindow2(std::string sequence, int window, std::vector<std::string> patterns);
RcppExport SEXP _kmeRtone_countSlidingWindow2(SEXP sequenceSEXP, SEXP windowSEXP, SEXP patternsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type sequence(sequenceSEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type patterns(patternsSEXP);
    rcpp_result_gen = Rcpp::wrap(countSlidingWindow2(sequence, window, patterns));
    return rcpp_result_gen;
END_RCPP
}
// count_substring_fixed
std::vector<int> count_substring_fixed(std::string sequence, std::vector<int> start, std::vector<int> end, std::string pattern);
RcppExport SEXP _kmeRtone_count_substring_fixed(SEXP sequenceSEXP, SEXP startSEXP, SEXP endSEXP, SEXP patternSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type sequence(sequenceSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type start(startSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type end(endSEXP);
    Rcpp::traits::input_parameter< std::string >::type pattern(patternSEXP);
    rcpp_result_gen = Rcpp::wrap(count_substring_fixed(sequence, start, end, pattern));
    return rcpp_result_gen;
END_RCPP
}
// count_substring_regex
std::vector<int> count_substring_regex(std::string sequence, std::vector<int> start, std::vector<int> end, std::string pattern);
RcppExport SEXP _kmeRtone_count_substring_regex(SEXP sequenceSEXP, SEXP startSEXP, SEXP endSEXP, SEXP patternSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type sequence(sequenceSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type start(startSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type end(endSEXP);
    Rcpp::traits::input_parameter< std::string >::type pattern(patternSEXP);
    rcpp_result_gen = Rcpp::wrap(count_substring_regex(sequence, start, end, pattern));
    return rcpp_result_gen;
END_RCPP
}
// simulatePopulation
Rcpp::NumericMatrix simulatePopulation(Rcpp::CharacterVector chrom_seq, std::vector<int> starts, std::vector<int> ends, std::string strand, Rcpp::DataFrame snv_df, int pop_size, Rcpp::CharacterVector top_kmers, Rcpp::CharacterVector central_pattern, Rcpp::NumericVector k);
RcppExport SEXP _kmeRtone_simulatePopulation(SEXP chrom_seqSEXP, SEXP startsSEXP, SEXP endsSEXP, SEXP strandSEXP, SEXP snv_dfSEXP, SEXP pop_sizeSEXP, SEXP top_kmersSEXP, SEXP central_patternSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type chrom_seq(chrom_seqSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type starts(startsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type ends(endsSEXP);
    Rcpp::traits::input_parameter< std::string >::type strand(strandSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type snv_df(snv_dfSEXP);
    Rcpp::traits::input_parameter< int >::type pop_size(pop_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type top_kmers(top_kmersSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type central_pattern(central_patternSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(simulatePopulation(chrom_seq, starts, ends, strand, snv_df, pop_size, top_kmers, central_pattern, k));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_kmeRtone_countKmers", (DL_FUNC) &_kmeRtone_countKmers, 2},
    {"_kmeRtone_countMidPatternContext2", (DL_FUNC) &_kmeRtone_countMidPatternContext2, 4},
    {"_kmeRtone_countMidPatternKmers", (DL_FUNC) &_kmeRtone_countMidPatternKmers, 3},
    {"_kmeRtone_countPointContext2", (DL_FUNC) &_kmeRtone_countPointContext2, 5},
    {"_kmeRtone_countRangedKmers", (DL_FUNC) &_kmeRtone_countRangedKmers, 4},
    {"_kmeRtone_countSlidingWindow", (DL_FUNC) &_kmeRtone_countSlidingWindow, 3},
    {"_kmeRtone_countSlidingWindow2", (DL_FUNC) &_kmeRtone_countSlidingWindow2, 3},
    {"_kmeRtone_count_substring_fixed", (DL_FUNC) &_kmeRtone_count_substring_fixed, 4},
    {"_kmeRtone_count_substring_regex", (DL_FUNC) &_kmeRtone_count_substring_regex, 4},
    {"_kmeRtone_simulatePopulation", (DL_FUNC) &_kmeRtone_simulatePopulation, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_kmeRtone(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
